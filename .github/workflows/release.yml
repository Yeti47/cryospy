name: Build and Release

on:
  push:
    tags: ['v*']

jobs:
  build-linux-server:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Build capture-server
      run: |
        cd server/capture-server
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o capture-server .
        
    - name: Build dashboard
      run: |
        cd server/dashboard
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o dashboard .
        
    - name: Package Linux server binaries
      run: |
        mkdir -p release/server-linux
        cp server/capture-server/capture-server release/server-linux/
        cp server/dashboard/dashboard release/server-linux/
        cp server/config.example.json release/server-linux/
        cp scripts/install-server-linux.sh release/server-linux/
        cp scripts/setup-nginx-proxy.sh release/server-linux/
        chmod +x release/server-linux/*
        tar -czf cryospy-server-linux-amd64.tar.gz -C release/server-linux .
        
    - name: Upload Linux server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-server-linux-amd64
        path: cryospy-server-linux-amd64.tar.gz

  build-linux-client-appimage:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        dnf update -y
        dnf install -y golang gcc gcc-c++ opencv-devel pkgconf-pkg-config ffmpeg \
                       desktop-file-utils file wget fuse fuse-libs
    
    - name: Build capture-client
      run: |
        cd client/capture-client
        go mod tidy
        CGO_ENABLED=1 go build -ldflags "-s -w" -o capture-client .
        
    - name: Download AppImageTool
      run: |
        wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
    - name: Copy binaries and scripts
      run: |
        cp client/capture-client/capture-client AppDir/usr/bin/
        cp client/capture-client/config.example.json AppDir/usr/bin/
        cp scripts/configure-client.sh AppDir/usr/bin/
        chmod +x AppDir/usr/bin/configure-client.sh
        
    - name: Create desktop file
      run: |
        cat > AppDir/usr/share/applications/cryospy-capture-client.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=CryoSpy Capture Client
        Comment=Video capture client for CryoSpy surveillance system
        Exec=capture-client
        Icon=cryospy-capture-client
        Categories=AudioVideo;Video;
        Terminal=true
        EOF
        
    - name: Create icon and AppRun script
      run: |
        # Copy the actual logo as the icon
        cp resources/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png
        
        # Create AppRun script that handles --configure flag
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        SELF=$(readlink -f "$0")
        HERE=${SELF%/*}
        export PATH="${HERE}/usr/bin/:${PATH}"
        cd "${HERE}/usr/bin"

        # Handle special arguments
        if [ "$1" = "--configure" ]; then
            shift
            exec "${HERE}/usr/bin/configure-client.sh" "$@"
        elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
            echo "CryoSpy Capture Client AppImage"
            echo ""
            echo "Usage:"
            echo "  $0                    Start the capture client"
            echo "  $0 --configure        Run configuration setup"
            echo "  $0 --help            Show this help"
            echo ""
            echo "The client requires a config.json file in the current directory."
            echo "Use --configure to create one interactively."
            exit 0
        else
            # Check if config.json exists
            if [ ! -f "config.json" ]; then
                echo "❌ config.json not found in current directory"
                echo ""
                echo "Please run configuration first:"
                echo "  $0 --configure"
                echo ""
                echo "Or copy config.example.json to config.json and edit it:"
                echo "  cp \"${HERE}/usr/bin/config.example.json\" config.json"
                exit 1
            fi
            exec "${HERE}/usr/bin/capture-client" "$@"
        fi
        EOF
        chmod +x AppDir/AppRun
        
    - name: Finalize AppDir
      run: |
        # Copy desktop file and icon to root of AppDir
        cp AppDir/usr/share/applications/cryospy-capture-client.desktop AppDir/
        cp AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png AppDir/
        
    - name: Build and verify AppImage
      run: |
        # Extract AppImageTool since FUSE may not work in container
        ./appimagetool --appimage-extract
        
        # Build AppImage using extracted tool with explicit architecture
        ARCH=x86_64 ./squashfs-root/AppRun AppDir cryospy-capture-client-linux-x86_64.AppImage
        
        # Verify AppImage was created and is executable
        if [ ! -f "cryospy-capture-client-linux-x86_64.AppImage" ]; then
            echo "❌ AppImage creation failed"
            exit 1
        fi
        
        chmod +x cryospy-capture-client-linux-x86_64.AppImage
        
        # Test basic functionality using extract-and-run (works without FUSE)
        ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract-and-run --help || echo "⚠️ Help command failed, but AppImage was created"
        
        echo "✅ AppImage created successfully"
        ls -la cryospy-capture-client-linux-x86_64.AppImage
        
    - name: Upload Linux client AppImage
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-client-linux-appimage
        path: cryospy-capture-client-linux-x86_64.AppImage

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Install vcpkg
      run: |
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        
    - name: Install OpenCV and FFmpeg
      run: |
        C:\vcpkg\vcpkg.exe install opencv[contrib]:x64-windows ffmpeg:x64-windows
        
    - name: Set environment variables
      run: |
        echo "PKG_CONFIG_PATH=C:\vcpkg\installed\x64-windows\lib\pkgconfig" >> $env:GITHUB_ENV
        echo "CGO_ENABLED=1" >> $env:GITHUB_ENV
        echo "C:\vcpkg\installed\x64-windows\bin" >> $env:GITHUB_PATH
        
    - name: Build capture-server
      run: |
        cd server/capture-server
        go mod tidy
        go build -tags release -ldflags "-s -w" -o capture-server.exe .
        
    - name: Build dashboard
      run: |
        cd server/dashboard
        go mod tidy
        go build -tags release -ldflags "-s -w" -o dashboard.exe .
        
    - name: Build capture-client
      run: |
        cd client/capture-client
        go mod tidy
        go build -ldflags "-s -w" -o capture-client.exe .
        
    - name: Package Windows server binaries
      run: |
        mkdir release\server-windows
        copy server\capture-server\capture-server.exe release\server-windows\
        copy server\dashboard\dashboard.exe release\server-windows\
        copy server\config.example.json release\server-windows\
        copy scripts\install-server-windows.ps1 release\server-windows\
        copy scripts\setup-nginx-proxy.ps1 release\server-windows\
        # Copy required DLLs
        copy C:\vcpkg\installed\x64-windows\bin\*.dll release\server-windows\ 2>$null || echo "Some DLLs not found, continuing..."
        
    - name: Package Windows client binaries
      run: |
        mkdir release\client-windows
        copy client\capture-client\capture-client.exe release\client-windows\
        copy client\capture-client\config.example.json release\client-windows\
        copy scripts\install-client-windows.ps1 release\client-windows\
        # Copy required DLLs
        copy C:\vcpkg\installed\x64-windows\bin\*.dll release\client-windows\ 2>$null || echo "Some DLLs not found, continuing..."
        
    - name: Create Windows packages
      run: |
        Compress-Archive -Path release\server-windows\* -DestinationPath cryospy-server-windows-amd64.zip
        Compress-Archive -Path release\client-windows\* -DestinationPath cryospy-client-windows-amd64.zip
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-windows-amd64
        path: |
          cryospy-server-windows-amd64.zip
          cryospy-client-windows-amd64.zip

  create-release:
    needs: [build-linux-server, build-linux-client-appimage, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cryospy-server-linux-amd64/cryospy-server-linux-amd64.tar.gz
          cryospy-client-linux-appimage/cryospy-capture-client-linux-x86_64.AppImage
          cryospy-windows-amd64/cryospy-server-windows-amd64.zip
          cryospy-windows-amd64/cryospy-client-windows-amd64.zip
        body: |
          ## CryoSpy Release ${{ github.ref_name }}
          
          ### Components Available
          - **Server Package (Linux)**: Contains capture-server and dashboard components
          - **Server Package (Windows)**: Contains capture-server and dashboard components  
          - **Client Package (Windows)**: Contains capture-client for video capture machines
          - **Client AppImage (Linux)**: Universal Linux client with all dependencies included
          
          ### Linux Installation
          
          **Server Installation:**
          ```bash
          tar -xzf cryospy-server-linux-amd64.tar.gz
          cd cryospy-server-linux-amd64
          chmod +x install-server-linux.sh
          ./install-server-linux.sh --with-systemd
          ```
          
          **Client Installation (AppImage):**
          ```bash
          # Download the AppImage
          wget https://github.com/Yeti47/cryospy/releases/download/${{ github.ref_name }}/cryospy-capture-client-linux-x86_64.AppImage
          
          # Make it executable
          chmod +x cryospy-capture-client-linux-x86_64.AppImage
          
          # Run configuration setup (interactive)
          ./cryospy-capture-client-linux-x86_64.AppImage --configure
          
          # Or run directly (config.json must exist in current directory)
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
          **Client Installation (Traditional):**
          The AppImage also supports traditional installation by extracting to a directory:
          ```bash
          # Extract AppImage contents
          ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract
          
          # Move to desired location
          sudo mv squashfs-root /opt/cryospy-client
          
          # Create symlink or run directly
          sudo ln -s /opt/cryospy-client/AppRun /usr/local/bin/cryospy-client
          ```
          
          **Automated Server Installation:**
          ```bash
          # Server with systemd services
          ./install-server-linux.sh --with-systemd --force
          ```
          
          ### Windows Installation
          
          **Server Installation:**
          1. Extract cryospy-server-windows-amd64.zip
          2. Run PowerShell as Administrator
          3. Execute: `.\install-server-windows.ps1`
          4. For internet access: `.\setup-nginx-proxy.ps1 -Domain yourdomain.com`
          
          **Client Installation:**
          1. Extract cryospy-client-windows-amd64.zip
          2. Run PowerShell as Administrator  
          3. Execute: `.\install-client-windows.ps1`
          
          **Automated Installation Examples:**
          ```powershell
          # Server with services and firewall
          .\install-server-windows.ps1 -InstallAsService -SetupFirewall
          
          # Server with nginx proxy and auth
          .\setup-nginx-proxy.ps1 -Domain "cryospy.yourdomain.com" -ProxyAuthHeader "X-CryoSpy-Auth" -ProxyAuthValue "your-secret-key"
          
          # Client with full configuration
          .\install-client-windows.ps1 -ServerUrl "https://cryospy.yourdomain.com" -ClientId "camera-001" -ClientSecret "secret" -ProxyAuthHeader "X-CryoSpy-Auth" -ProxyAuthValue "your-secret-key" -InstallAsService
          ```
          
          ### Benefits of AppImage Distribution (Linux Client)
          
          - **Universal Compatibility**: Works on all major Linux distributions
          - **No Dependency Issues**: All OpenCV contrib modules (including ArUco) are bundled
          - **Easy Installation**: Single executable file, no package management required
          - **Portable**: Can run from any location without installation
          - **Self-Contained**: No conflicts with system OpenCV installations
          
          ### Configuration
          - Server configurations are automatically created during installation
          - Linux client AppImage supports both interactive configuration and config file setup
          - Configuration files are placed in the current working directory when using AppImage
          - See the included config.example.json files for reference
          - **Proxy Authentication**: Both server and client support configurable proxy authentication for enhanced security
          
          ### Quick Start
          
          **On Server Machine:**
          ```bash
          # After running installation script
          ./capture-server &
          ./dashboard &
          # Access dashboard at http://localhost:8080
          ```
          
          **On Client Machines:**
          
          *Linux (AppImage):*
          ```bash
          # Interactive setup on first run
          ./cryospy-capture-client-linux-x86_64.AppImage --configure
          
          # Then start normally
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
          *Windows:*
          ```bash
          # Configuration is set up during installation
          # Just start the client after installation
          ./capture-client.exe
          ```
          
          ### Security Features
          - **End-to-end encryption** ensures video data is encrypted at rest, and additionally in transit if using HTTPS
          - **Proxy authentication** support for defense-in-depth security
          - **Configurable trusted proxies** for production deployments
          - **Automatic client disabling** after authentication failures
          - **Rate limiting** and **HTTPS enforcement** via nginx proxy setup
          
          ### Troubleshooting
          
          **Linux AppImage Issues:**
          ```bash
          # If AppImage won't run, try extracting and running manually
          ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract
          cd squashfs-root
          ./AppRun
          
          # For camera permission issues
          sudo usermod -a -G video $USER
          # Then log out and back in
          
          # Check camera availability
          ls -la /dev/video*
          ```
          
          **Windows Client Issues:**
          ```powershell
          # If OpenCV DLLs are missing after extraction
          # Ensure all DLLs from the zip are in the same directory as capture-client.exe
          
          # For camera access issues
          # Check Windows Camera privacy settings
          # Ensure no other applications are using the camera
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
