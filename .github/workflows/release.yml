name: Build and Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write

jobs:
  build-linux-server:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Build capture-server
      run: |
        cd server/capture-server
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o capture-server .
        
    - name: Build dashboard
      run: |
        cd server/dashboard
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o dashboard .
        
    - name: Package Linux server binaries
      run: |
        mkdir -p release/server-linux
        cp server/capture-server/capture-server release/server-linux/
        cp server/dashboard/dashboard release/server-linux/
        cp server/config.example.json release/server-linux/
        cp scripts/install-server-linux.sh release/server-linux/
        cp scripts/setup-nginx-proxy.sh release/server-linux/
        chmod +x release/server-linux/*
        tar -czf cryospy-server-linux-amd64.tar.gz -C release/server-linux .
        
    - name: Upload Linux server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-server-linux-amd64
        path: cryospy-server-linux-amd64.tar.gz

  build-linux-client-appimage:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        dnf update -y

        # List all .so files before installing runtime dependencies
        find /usr/lib /usr/lib64 /lib /lib64 -type f -name '*.so*' > /tmp/sofiles-before.txt

        # Install only runtime dependencies first
        dnf install -y opencv-devel pkgconf-pkg-config ffmpeg

        # List all .so files after installing runtime dependencies
        find /usr/lib /usr/lib64 /lib /lib64 -type f -name '*.so*' > /tmp/sofiles-after.txt

        # Compute the delta: new .so files introduced by runtime dependencies
        comm -13 <(sort /tmp/sofiles-before.txt) <(sort /tmp/sofiles-after.txt) > /tmp/sofiles-delta.txt

        # Now install build-time dependencies
        dnf install -y golang gcc gcc-c++ desktop-file-utils file wget fuse fuse-libs
    
    - name: Build capture-client
      run: |
        cd client/capture-client
        go mod tidy
        CGO_ENABLED=1 go build -ldflags "-s -w" -o capture-client .
        
    - name: Download AppImageTool
      run: |
        wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
    - name: Copy binaries and scripts
      run: |
        cp client/capture-client/capture-client AppDir/usr/bin/
        cp client/capture-client/config.example.json AppDir/usr/bin/
        cp scripts/configure-client.sh AppDir/usr/bin/
        chmod +x AppDir/usr/bin/configure-client.sh



        # Copy only new .so files introduced by dependency installation
        echo "Copying new shared libraries introduced by dependencies..."
        while read -r lib; do
          if [ -f "$lib" ]; then
            cp -n "$lib" AppDir/usr/bin/
            echo "Copied: $lib"
          fi
        done < /tmp/sofiles-delta.txt

        # Optionally, print out what was copied for debugging
        echo "All .so files in AppDir/usr/bin:"
        ls -l AppDir/usr/bin/*.so* || echo "No .so files found"
        
    - name: Create desktop file
      run: |
        cat > AppDir/usr/share/applications/cryospy-capture-client.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=CryoSpy Capture Client
        Comment=Video capture client for CryoSpy surveillance system
        Exec=capture-client
        Icon=cryospy-capture-client
        Categories=AudioVideo;Video;
        Terminal=true
        EOF
        
    - name: Create icon and AppRun script
      run: |
        # Copy the actual logo as the icon
        cp resources/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png
        
        # Create AppRun script that handles --configure flag
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        SELF=$(readlink -f "$0")
        HERE=${SELF%/*}
        export PATH="${HERE}/usr/bin/:${PATH}"
        export LD_LIBRARY_PATH="${HERE}/usr/bin:${LD_LIBRARY_PATH}"

        # Handle special arguments
        if [ "$1" = "--configure" ]; then
            shift
            # Run configure-client.sh in the user's current working directory
            exec bash "${HERE}/usr/bin/configure-client.sh" "$@"
        elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
            echo "CryoSpy Capture Client AppImage"
            echo ""
            echo "Usage:"
            echo "  $0                    Start the capture client"
            echo "  $0 --configure        Run configuration setup"
            echo "  $0 --help            Show this help"
            echo ""
            echo "The client requires a config.json file in the current directory."
            echo "Use --configure to create one interactively."
            exit 0
        else
            # Check if config.json exists in the user's current directory
            if [ ! -f "config.json" ]; then
                echo "❌ config.json not found in current directory"
                echo ""
                echo "Please run configuration first:"
                echo "  $0 --configure"
                echo ""
                echo "Or copy config.example.json to config.json and edit it:"
                echo "  cp \"${HERE}/usr/bin/config.example.json\" config.json"
                exit 1
            fi
            # Run capture-client from AppImage, but in user's working directory
            exec "${HERE}/usr/bin/capture-client" "$@"
        fi
        EOF
        chmod +x AppDir/AppRun
        
    - name: Finalize AppDir
      run: |
        # Copy desktop file and icon to root of AppDir
        cp AppDir/usr/share/applications/cryospy-capture-client.desktop AppDir/
        cp AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png AppDir/
        
    - name: Build and verify AppImage
      run: |
        # Extract AppImageTool since FUSE may not work in container
        ./appimagetool --appimage-extract
        
        # Build AppImage using extracted tool with explicit architecture
        ARCH=x86_64 ./squashfs-root/AppRun AppDir cryospy-capture-client-linux-x86_64.AppImage
        
        # Verify AppImage was created and is executable
        if [ ! -f "cryospy-capture-client-linux-x86_64.AppImage" ]; then
            echo "❌ AppImage creation failed"
            exit 1
        fi
        
        chmod +x cryospy-capture-client-linux-x86_64.AppImage
        
        # Test basic functionality using extract-and-run (works without FUSE)
        ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract-and-run --help || echo "⚠️ Help command failed, but AppImage was created"
        
        echo "✅ AppImage created successfully"
        ls -la cryospy-capture-client-linux-x86_64.AppImage
        
    - name: Upload Linux client AppImage
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-client-linux-appimage
        path: cryospy-capture-client-linux-x86_64.AppImage

  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Install Chocolatey
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        
    - name: Install FFmpeg via Chocolatey
      run: |
        # Install FFmpeg via Chocolatey (fast runtime dependency)
        choco install ffmpeg -y
        
    - name: Cache OpenCV build
      id: cache-opencv
      uses: actions/cache@v4
      with:
        path: C:\opencv
        key: opencv-4.12.0-gocv-windows
        restore-keys: |
          opencv-4.12.0-gocv-windows
        
    - name: Install build tools for OpenCV compilation
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        # Install Git (required by gocv build script)
        choco install git -y
        
        # Install Visual Studio Build Tools (required for compilation)
        choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y
        
    - name: Build OpenCV with contrib modules using official gocv script
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        # Download and run the official gocv OpenCV build script
        # This builds OpenCV 4.12.0 + contrib modules specifically for gocv
        Invoke-WebRequest -Uri "https://raw.githubusercontent.com/hybridgroup/gocv/release/win_build_opencv.cmd" -OutFile "win_build_opencv.cmd"
        
        Write-Host "Building OpenCV with contrib modules using official gocv script..."
        Write-Host "This will take at least 1 hour but ensures perfect gocv compatibility..."
        
        # Set up minimal GOPATH structure to satisfy the script
        $env:GOPATH = "C:\gopath"
        New-Item -Path "C:\gopath\src\gocv.io\x\gocv" -ItemType Directory -Force | Out-Null
        
        # Run the build script (ignore final directory change error)
        $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "win_build_opencv.cmd" -Wait -PassThru -NoNewWindow
        
        # Check if OpenCV was built successfully (ignore the final chdir error)
        if (Test-Path "C:\opencv\build") {
          Write-Host "✅ OpenCV build completed successfully"
        } else {
          Write-Host "❌ OpenCV build failed - build directory not found"
          exit 1
        }
        
    - name: Verify OpenCV installation
      run: |
        # Verify OpenCV was either built or restored from cache
        if (Test-Path "C:\opencv\build") {
          Write-Host "✅ OpenCV installation found at C:\opencv\build"
          Get-ChildItem "C:\opencv\build" -Recurse -Include "*.dll" | Select-Object -First 5 | ForEach-Object { Write-Host "  Found: $($_.Name)" }
        } else {
          Write-Host "❌ OpenCV installation not found!"
          exit 1
        }
        
    - name: Set environment variables
      run: |
        # gocv script installs OpenCV to C:\opencv, FFmpeg via Chocolatey to C:\tools\ffmpeg
        echo "CGO_ENABLED=1" >> $env:GITHUB_ENV
        echo "C:\opencv\build\x64\vc16\bin;C:\tools\ffmpeg\bin" >> $env:GITHUB_PATH
        echo "OpenCV_DIR=C:\opencv\build" >> $env:GITHUB_ENV
        
    - name: Build capture-server
      run: |
        cd server/capture-server
        go mod tidy
        go build -tags release -ldflags "-s -w" -o capture-server.exe .
        
    - name: Build dashboard
      run: |
        cd server/dashboard
        go mod tidy
        go build -tags release -ldflags "-s -w" -o dashboard.exe .
        
    - name: Build capture-client
      run: |
        cd client/capture-client
        go mod tidy
        go build -ldflags "-s -w" -o capture-client.exe .
        
    - name: Package Windows server binaries
      run: |
        mkdir release\server-windows
        copy server\capture-server\capture-server.exe release\server-windows\
        copy server\dashboard\dashboard.exe release\server-windows\
        copy server\config.example.json release\server-windows\
        copy scripts\install-server-windows.ps1 release\server-windows\
        copy scripts\setup-nginx-proxy.ps1 release\server-windows\
        
    - name: Copy DLLs to server output
      run: |
        # Ensure target directory exists
        if (!(Test-Path release\server-windows)) { New-Item -ItemType Directory -Path release\server-windows | Out-Null }

        Write-Host "Listing all DLLs under C:\opencv for debugging..."
        Get-ChildItem -Path 'C:\opencv' -Recurse -Filter '*.dll' -ErrorAction SilentlyContinue | ForEach-Object { Write-Host $_.FullName }

        # Copy all OpenCV DLLs from common build output directories
        $opencvDllDirs = @('C:\opencv\build\bin', 'C:\opencv\build\install\x64\mingw\bin', 'C:\opencv\build\x64\vc16\bin')
        foreach ($dir in $opencvDllDirs) {
          if (Test-Path $dir) {
            Get-ChildItem -Path $dir -Filter 'opencv_*.dll' -ErrorAction SilentlyContinue | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination 'release\server-windows\' -Force
              Write-Host "Copied: $($_.FullName)"
            }
          }
        }

        # Fail early if no OpenCV DLLs were copied
        $copied = Get-ChildItem -Path 'release\server-windows' -Filter 'opencv_*.dll' -ErrorAction SilentlyContinue
        if (-not $copied) {
          Write-Host "❌ No OpenCV DLLs were copied to release\server-windows. Please ensure OpenCV was built or cache restored correctly."
          exit 1
        }

        # Copy FFmpeg DLLs from Chocolatey installation to server directory (if present)
        if (Test-Path 'C:\tools\ffmpeg\bin') {
          Get-ChildItem 'C:\tools\ffmpeg\bin' -Filter '*.dll' -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item -Path $_.FullName -Destination 'release\server-windows\' -Force }
        } else {
          Write-Host "⚠️ C:\tools\ffmpeg\bin not found; skipping FFmpeg DLL copy"
        }

    - name: Package Windows client binaries
      run: |
        mkdir release\client-windows
        copy client\capture-client\capture-client.exe release\client-windows\
        copy client\capture-client\config.example.json release\client-windows\
        copy scripts\install-client-windows.ps1 release\client-windows\
        # Copy all OpenCV DLLs from common build output directories
        $opencvDllDirs = @('C:\opencv\build\bin', 'C:\opencv\build\install\x64\mingw\bin', 'C:\opencv\build\x64\vc16\bin')
        foreach ($dir in $opencvDllDirs) {
          if (Test-Path $dir) {
            Get-ChildItem -Path $dir -Filter 'opencv_*.dll' -ErrorAction SilentlyContinue | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination 'release\client-windows\' -Force
              Write-Host "Copied: $($_.FullName)"
            }
          }
        }
        # Copy FFmpeg DLLs from Chocolatey installation to client directory (if present)
        if (Test-Path 'C:\tools\ffmpeg\bin') {
          Get-ChildItem 'C:\tools\ffmpeg\bin' -Filter '*.dll' -ErrorAction SilentlyContinue | ForEach-Object { Copy-Item -Path $_.FullName -Destination 'release\client-windows\' -Force }
        } else {
          Write-Host "⚠️ C:\tools\ffmpeg\bin not found; skipping FFmpeg DLL copy"
        }
        
    - name: Create Windows packages
      run: |
        Compress-Archive -Path release\server-windows\* -DestinationPath cryospy-server-windows-amd64.zip
        Compress-Archive -Path release\client-windows\* -DestinationPath cryospy-client-windows-amd64.zip
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-windows-amd64
        path: |
          cryospy-server-windows-amd64.zip
          cryospy-client-windows-amd64.zip

  create-release:
    needs: [build-linux-server, build-linux-client-appimage, build-windows]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cryospy-server-linux-amd64/cryospy-server-linux-amd64.tar.gz
          cryospy-client-linux-appimage/cryospy-capture-client-linux-x86_64.AppImage
          cryospy-windows-amd64/cryospy-server-windows-amd64.zip
          cryospy-windows-amd64/cryospy-client-windows-amd64.zip
        body: |
          ## CryoSpy Release ${{ github.ref_name }}
          
          ### Components Available
          - **Server Package (Linux)**: Contains capture-server and dashboard components
          - **Server Package (Windows)**: Contains capture-server and dashboard components  
          - **Client Package (Windows)**: Contains capture-client for video capture machines
          - **Client AppImage (Linux)**: Universal Linux client with all dependencies included
          
          ### Linux Installation
          
          **Server Installation:**
          ```bash
          tar -xzf cryospy-server-linux-amd64.tar.gz
          cd cryospy-server-linux-amd64
          chmod +x install-server-linux.sh
          ./install-server-linux.sh --with-systemd
          ```
          
          **Client Installation (AppImage):**
          ```bash
          # Download the AppImage
          wget https://github.com/Yeti47/cryospy/releases/download/${{ github.ref_name }}/cryospy-capture-client-linux-x86_64.AppImage
          
          # Make it executable
          chmod +x cryospy-capture-client-linux-x86_64.AppImage
          
          # Run configuration setup (interactive)
          ./cryospy-capture-client-linux-x86_64.AppImage --configure
          
          # Or run directly (config.json must exist in current directory)
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
          **Client Installation (Traditional):**
          The AppImage also supports traditional installation by extracting to a directory:
          ```bash
          # Extract AppImage contents
          ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract
          
          # Move to desired location
          sudo mv squashfs-root /opt/cryospy-client
          
          # Create symlink or run directly
          sudo ln -s /opt/cryospy-client/AppRun /usr/local/bin/cryospy-client
          ```
          
          **Automated Server Installation:**
          ```bash
          # Server with systemd services
          ./install-server-linux.sh --with-systemd --force
          ```
          
          ### Windows Installation
          
          **Server Installation:**
          1. Extract cryospy-server-windows-amd64.zip
          2. Run PowerShell as Administrator
          3. Execute: `.\install-server-windows.ps1`
          4. For internet access: `.\setup-nginx-proxy.ps1 -Domain yourdomain.com`
          
          **Client Installation:**
          1. Extract cryospy-client-windows-amd64.zip to desired location
          2. Run PowerShell as Administrator (optional, for service installation)
          3. Execute: `.\install-client-windows.ps1`
          
          **Note:** All OpenCV dependencies are bundled with the Windows release.
          Only FFmpeg is optionally installed for advanced video processing features.
          
          **Automated Installation Examples:**
          ```powershell
          # Server with services and firewall
          .\install-server-windows.ps1 -InstallAsService -SetupFirewall
          
          # Server with nginx proxy and auth
          .\setup-nginx-proxy.ps1 -Domain "cryospy.yourdomain.com" -ProxyAuthHeader "X-CryoSpy-Auth" -ProxyAuthValue "your-secret-key"
          
          # Client with full configuration (FFmpeg is optional)
          .\install-client-windows.ps1 -ServerUrl "https://cryospy.yourdomain.com" -ClientId "camera-001" -ClientSecret "secret" -ProxyAuthHeader "X-CryoSpy-Auth" -ProxyAuthValue "your-secret-key" -InstallAsService
          ```
          
          ### Configuration
          - Server configurations are automatically created during installation
          - Linux client AppImage supports interactive config generation
          - See the included config.example.json files for reference
          - **Proxy Authentication**: Both server and client support configurable proxy authentication for enhanced security
                    
          ### Quick Start
          
          **On Server Machine:**
          ```bash
          # After running installation script
          ./capture-server &
          ./dashboard &
          # Access dashboard at http://localhost:8080
          ```
          
          **On Client Machines:**
          
          *Linux (AppImage):*
          ```bash
          # Interactive setup on first run
          ./cryospy-capture-client-linux-x86_64.AppImage --configure
          
          # Then start normally
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
          *Windows:*
          ```powershell
          # Configuration is set up during installation
          # Just start the client after installation
          ./capture-client.exe
          ```
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
