name: Build and Release

on:
  push:
    tags: ['v*']

permissions:
  contents: write

jobs:
  build-linux-server:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Build capture-server
      run: |
        cd server/capture-server
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o capture-server .
        
    - name: Build dashboard
      run: |
        cd server/dashboard
        go mod tidy
        CGO_ENABLED=0 go build -tags release -ldflags "-s -w" -o dashboard .
        
    - name: Package Linux server binaries
      run: |
        mkdir -p release/server-linux
        cp server/capture-server/capture-server release/server-linux/
        cp server/dashboard/dashboard release/server-linux/
        cp server/config.example.json release/server-linux/
        cp scripts/install-server-linux.sh release/server-linux/
        cp scripts/setup-nginx-proxy.sh release/server-linux/
        chmod +x release/server-linux/*
        tar -czf cryospy-server-linux-amd64.tar.gz -C release/server-linux .
        
    - name: Upload Linux server artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-server-linux-amd64
        path: cryospy-server-linux-amd64.tar.gz

  build-linux-client-appimage:
    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
    
    - name: Install dependencies
      run: |
        export DEBIAN_FRONTEND=noninteractive
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          pkg-config \
          libopencv-dev \
          libopencv-contrib-dev \
          ffmpeg \
          patchelf \
          desktop-file-utils \
          file \
          wget \
          libfuse2 \
          ca-certificates \
          libgtk-3-dev \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          libtbb-dev \
          libopenblas-dev \
          liblapacke-dev
        sudo rm -rf /var/lib/apt/lists/*
    
    - name: Build capture-client
      run: |
        cd client/capture-client
        go mod tidy
        CGO_ENABLED=1 go build -ldflags "-s -w" -o capture-client .
        
    - name: Download AppImageTool
      run: |
        wget -O linuxdeploy-x86_64.AppImage https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        
    - name: Create AppDir structure
      run: |
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
        
    - name: Copy binaries and scripts
      run: |
        cp client/capture-client/capture-client AppDir/usr/bin/
        cp client/capture-client/config.example.json AppDir/usr/bin/
        cp scripts/configure-client.sh AppDir/usr/bin/
        chmod +x AppDir/usr/bin/configure-client.sh
        cat > AppDir/usr/share/applications/cryospy-capture-client.desktop << 'EOF'
        [Desktop Entry]
        Type=Application
        Name=CryoSpy Capture Client
        Comment=Video capture client for CryoSpy surveillance system
        Exec=capture-client
        Icon=cryospy-capture-client
        Categories=AudioVideo;Video;
        Terminal=true
        EOF
        
    - name: Create icon and AppRun script
      run: |
        # Copy the actual logo as the icon
        cp resources/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png
        
        # Create AppRun script that handles --configure flag
        cat > AppDir/AppRun << 'EOF'
        #!/bin/bash
        SELF=$(readlink -f "$0")
        HERE=${SELF%/*}
        export PATH="${HERE}/usr/bin:${PATH}"
        export LD_LIBRARY_PATH="${HERE}/usr/lib:${HERE}/usr/lib64:${HERE}/usr/bin:${LD_LIBRARY_PATH}"

        # Handle special arguments
        if [ "$1" = "--configure" ]; then
            shift
            # Run configure-client.sh in the user's current working directory
            exec bash "${HERE}/usr/bin/configure-client.sh" "$@"
        elif [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
            echo "CryoSpy Capture Client AppImage"
            echo ""
            echo "Usage:"
            echo "  $0                    Start the capture client"
            echo "  $0 --configure        Run configuration setup"
            echo "  $0 --help            Show this help"
            echo ""
            echo "The client requires a config.json file in the current directory."
            echo "Use --configure to create one interactively."
            exit 0
        else
            # Check if config.json exists in the user's current directory
            if [ ! -f "config.json" ]; then
                echo "❌ config.json not found in current directory"
                echo ""
                echo "Please run configuration first:"
                echo "  $0 --configure"
                echo ""
                echo "Or copy config.example.json to config.json and edit it:"
                echo "  cp \"${HERE}/usr/bin/config.example.json\" config.json"
                exit 1
            fi
            # Run capture-client from AppImage, but in user's working directory
            exec "${HERE}/usr/bin/capture-client" "$@"
        fi
        EOF
        chmod +x AppDir/AppRun
        
    - name: Finalize AppDir
      run: |
        # Copy desktop file and icon to root of AppDir
        cp AppDir/usr/share/applications/cryospy-capture-client.desktop AppDir/
        cp AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png AppDir/
        
    - name: Extract linuxdeploy AppImage
      run: |
        ./linuxdeploy-x86_64.AppImage --appimage-extract
        mv squashfs-root linuxdeploy-extracted

    - name: Build AppImage using extracted linuxdeploy
      run: |
        linuxdeploy-extracted/AppRun --appdir AppDir \
          -d AppDir/usr/share/applications/cryospy-capture-client.desktop \
          -i AppDir/usr/share/icons/hicolor/256x256/apps/cryospy-capture-client.png \
          --output appimage

        # Find the generated AppImage and rename it to the expected name
        APPIMAGE=$(ls *.AppImage | head -n 1)
        TARGET_APPIMAGE="cryospy-capture-client-linux-x86_64.AppImage"
        if [ ! -f "$APPIMAGE" ]; then
          echo "❌ AppImage creation failed"
          exit 1
        fi
        mv "$APPIMAGE" "$TARGET_APPIMAGE"
        chmod +x "$TARGET_APPIMAGE"
        echo "✅ AppImage created successfully"
        ls -la "$TARGET_APPIMAGE"
        
    - name: Smoke test AppImage
      run: |
        chmod +x cryospy-capture-client-linux-x86_64.AppImage
        ./cryospy-capture-client-linux-x86_64.AppImage --help

    - name: Package AppImage with licenses
      run: |
        mkdir -p release/client-appimage
        cp cryospy-capture-client-linux-x86_64.AppImage release/client-appimage/
        cp README.md release/client-appimage/
        cp LICENSE release/client-appimage/
        curl -fsSL https://raw.githubusercontent.com/opencv/opencv/4.x/LICENSE -o release/client-appimage/LICENSE-OpenCV
        tar -czf cryospy-client-linux-x86_64.tar.gz -C release/client-appimage .

    - name: Upload packaged AppImage bundle
      uses: actions/upload-artifact@v4
      with:
        name: cryospy-client-linux-appimage-bundle
        path: cryospy-client-linux-x86_64.tar.gz

  create-release:
    needs: [build-linux-server, build-linux-client-appimage]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          cryospy-server-linux-amd64/cryospy-server-linux-amd64.tar.gz
          cryospy-client-linux-appimage-bundle/cryospy-client-linux-x86_64.tar.gz
        body: |
          ## CryoSpy Release ${{ github.ref_name }}
          
          ### Components Available
          - **Server Package (Linux)**: Contains capture-server and dashboard components
          - **Client AppImage Bundle (Linux)**: AppImage packaged with project documentation and OpenCV license
          
          ### Linux Installation

          **Server Installation:**
          ```bash
          tar -xzf cryospy-server-linux-amd64.tar.gz
          cd cryospy-server-linux-amd64
          chmod +x install-server-linux.sh
          ./install-server-linux.sh --with-systemd
          ```
          
          **Client Installation (AppImage):**
          ```bash
          # Download and extract bundle
          wget https://github.com/Yeti47/cryospy/releases/download/${{ github.ref_name }}/cryospy-client-linux-x86_64.tar.gz
          tar -xzf cryospy-client-linux-x86_64.tar.gz
          cd cryospy-client-linux-x86_64

          # Make AppImage executable
          chmod +x cryospy-capture-client-linux-x86_64.AppImage

          # Run configuration setup (interactive)
          ./cryospy-capture-client-linux-x86_64.AppImage --configure

          # Or run directly (config.json must exist in current directory)
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
          **Client Installation (Traditional):**
          The AppImage also supports traditional installation by extracting to a directory:
          ```bash
          # Extract AppImage contents
          cd cryospy-client-linux-x86_64
          ./cryospy-capture-client-linux-x86_64.AppImage --appimage-extract
          
          # Move to desired location
          sudo mv squashfs-root /opt/cryospy-client
          
          # Create symlink or run directly
          sudo ln -s /opt/cryospy-client/AppRun /usr/local/bin/cryospy-client
          ```
          
          **Automated Server Installation:**
          ```bash
          # Server with systemd services
          ./install-server-linux.sh --with-systemd --force
          ```
          
          ### Windows Support

          Windows binaries are not currently published via the automated release process.
          To run CryoSpy on Windows, build from source using the instructions in the repository README.
          
          ### Configuration
          - Server configurations are automatically created during installation
          - Linux client AppImage supports interactive config generation
          - See the included config.example.json files for reference
          - **Proxy Authentication**: Both server and client support configurable proxy authentication for enhanced security
                    
          ### Quick Start
          
          **On Server Machine:**
          ```bash
          # After running installation script
          ./capture-server &
          ./dashboard &
          # Access dashboard at http://localhost:8080
          ```
          
          **On Client Machines:**
          
          *Linux (AppImage):*
          ```bash
          # Interactive setup on first run
          ./cryospy-capture-client-linux-x86_64.AppImage --configure
          
          # Then start normally
          ./cryospy-capture-client-linux-x86_64.AppImage
          ```
          
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
